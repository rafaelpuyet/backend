generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique @db.VarChar(255)
  password   String   @db.VarChar(255)
  name       String?  @db.VarChar(100)
  phone      String?  @db.VarChar(20)
  username   String   @unique @db.VarChar(50)
  isVerified Boolean  @default(false)
  isBusiness Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  business   Business?
  verificationTokens VerificationToken[]
  refreshTokens RefreshToken[]
  auditLogs  AuditLog[]
}

model Business {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  name        String   @db.VarChar(100)
  logo        String?  @db.VarChar(255)
  timezone    String?  @db.VarChar(50) @default("UTC")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  branches    Branch[]
  workers     Worker[]
  schedules   Schedule[]
  appointments Appointment[]
  exceptions  Exception[]
  availableSlots AvailableSlots[]
}

model Branch {
  id          Int      @id @default(autoincrement())
  businessId  Int
  name        String   @db.VarChar(100)
  address     String?  @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  business    Business @relation(fields: [businessId], references: [id], onDelete: Restrict)
  workers     Worker[]
  schedules   Schedule[]
  appointments Appointment[]
  exceptions  Exception[]
  availableSlots AvailableSlots[]
  @@index([businessId])
}

model Worker {
  id          Int      @id @default(autoincrement())
  businessId  Int
  branchId    Int?
  workerName  String   @db.VarChar(100)
  isOwner     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  business    Business @relation(fields: [businessId], references: [id], onDelete: Restrict)
  branch      Branch?  @relation(fields: [branchId], references: [id])
  schedules   Schedule[]
  appointments Appointment[]
  exceptions  Exception[]
  availableSlots AvailableSlots[]
  @@index([businessId, branchId])
}

model Schedule {
  id          Int      @id @default(autoincrement())
  businessId  Int
  branchId    Int?
  workerId    Int?
  dayOfWeek   Int
  startTime   String   @db.VarChar(8) // Formato HH:MM:SS
  endTime     String   @db.VarChar(8) // Formato HH:MM:SS
  slotDuration Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  business    Business @relation(fields: [businessId], references: [id], onDelete: Restrict)
  branch      Branch?  @relation(fields: [branchId], references: [id])
  worker      Worker?  @relation(fields: [workerId], references: [id])
  @@index([businessId, dayOfWeek])
}

model Appointment {
  id          Int      @id @default(autoincrement())
  businessId  Int
  branchId    Int?
  workerId    Int?
  clientName  String   @db.VarChar(100)
  clientEmail String   @db.VarChar(255)
  clientPhone String   @db.VarChar(20)
  startTime   DateTime
  endTime     DateTime
  status      String   @db.VarChar(20) @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  business    Business @relation(fields: [businessId], references: [id], onDelete: Restrict)
  branch      Branch?  @relation(fields: [branchId], references: [id])
  worker      Worker?  @relation(fields: [workerId], references: [id])
  temporaryTokens TemporaryToken[]
  @@index([businessId, startTime])
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique @db.VarChar(64)
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Exception {
  id          Int      @id @default(autoincrement())
  businessId  Int
  branchId    Int?
  workerId    Int?
  date        DateTime // Solo fecha
  isClosed    Boolean
  startTime   String?  @db.VarChar(8) // Formato HH:MM:SS
  endTime     String?  @db.VarChar(8) // Formato HH:MM:SS
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  business    Business @relation(fields: [businessId], references: [id], onDelete: Restrict)
  branch      Branch?  @relation(fields: [branchId], references: [id])
  worker      Worker?  @relation(fields: [workerId], references: [id])
  @@index([businessId, date])
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique @db.VarChar(64)
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TemporaryToken {
  id           Int      @id @default(autoincrement())
  token        String   @unique @db.VarChar(64)
  appointmentId Int
  clientEmail  String   @db.VarChar(255)
  expiresAt    DateTime
  used         Boolean  @default(false)
  createdAt    DateTime @default(now())
  appointment  Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
}

model AvailableSlots {
  id        Int      @id @default(autoincrement())
  businessId Int
  branchId  Int?
  workerId  Int?
  date      DateTime // Solo fecha
  startTime String   @db.VarChar(8) // Formato HH:MM:SS
  endTime   String   @db.VarChar(8) // Formato HH:MM:SS
  createdAt DateTime @default(now())
  business  Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  branch    Branch?  @relation(fields: [branchId], references: [id])
  worker    Worker?  @relation(fields: [workerId], references: [id])
  @@index([businessId])
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  action    String   @db.VarChar(50)
  entity    String   @db.VarChar(50)
  entityId  Int
  userId    Int?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  @@index([entity, entityId])
}